{
  "name": "Construction AI Assistant with Complete Project Updates v4.1",
  "nodes": [
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "metadata.fileName",
              "value": "={{ $json.name || $json.fileName || 'Dokumen' }}"
            },
            {
              "name": "metadata.fileId",
              "value": "={{ $json.id }}"
            },
            {
              "name": "metadata.url",
              "value": "={{ $json.webViewLink || $json.webContentLink }}"
            },
            {
              "name": "metadata.source",
              "value": "Google Drive"
            }
          ]
        },
        "options": {}
      },
      "id": "ee578f39-9b7f-4383-b554-1fff5a575f22",
      "name": "Set Metadata (fileName)",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        2240,
        976
      ]
    },
    {
      "parameters": {
        "language": "JavaScript",
        "jsCode": "// Build \"Sumber: <NamaDokumen> [p:x]\" using retrieval metadata (Input 2)\nconst answer = $json.output ?? $json.text ?? '';\n\n// Get items from second input (Retrieval output)\nconst input2 = $input.all(1) || [];\nconst collected = [];\n\n// Helper: collect documents array from various shapes\nfunction docsFrom(obj) {\n  if (!obj) return [];\n  if (Array.isArray(obj)) return obj;\n  if (obj.documents) return obj.documents;\n  if (obj.results) return obj.results;\n  if (obj.matches) return obj.matches;\n  if (obj.data?.documents) return obj.data.documents;\n  return [];\n}\n\n// Aggregate docs\nfor (const it of input2) {\n  const j = it.json ?? it;\n  collected.push(...docsFrom(j));\n}\n\nconst byFile = new Map();\nfor (const d of collected) {\n  const meta = d.metadata || {};\n  const name = meta.fileName || meta.filename || meta.file || 'Dokumen';\n  const p = meta.pageNumber ?? meta.page ?? null;\n  if (!byFile.has(name)) byFile.set(name, new Set());\n  if (p != null) byFile.get(name).add(Number(p));\n}\n\n// Compress pages into ranges\nfunction compress(pages) {\n  const arr = [...pages].sort((a,b)=>a-b);\n  const out = [];\n  let s = null, prev = null;\n  for (const x of arr) {\n    if (s === null) { s = prev = x; continue; }\n    if (x === prev + 1) { prev = x; continue; }\n    out.push(s === prev ? `[p:${s}]` : `[p:${s}–${prev}]`);\n    s = prev = x;\n  }\n  if (s !== null) out.push(s === prev ? `[p:${s}]` : `[p:${s}–${prev}]`);\n  return out.join(', ');\n}\n\nconst parts = [];\nfor (const [name, pages] of byFile.entries()) {\n  const tag = (pages && pages.size) ? `${name} ${compress(pages)}` : name;\n  parts.push(tag);\n}\n\n// Remove any existing citation line that starts with \"Sumber:\"\nlet out = answer.replace(/\\n?Sumber:\\s*.*$/is, '').trim();\nif (parts.length) out += `\\n\\nSumber: ${parts.slice(0,3).join('; ')}`;\n\nreturn [{ json: { ...$json, output: out, citations: parts } }];\n"
      },
      "id": "7fc8e6b5-561f-4353-8032-06cd2c6e2750",
      "name": "Citation Post-Formatter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2432,
        1568
      ]
    },
    {
      "parameters": {
        "language": "JavaScript",
        "jsCode": "// Telegram Chunker (Code)\n// - Konversi Markdown ringan (**bold**, __italic__, `code`) ke HTML\n// - Escape karakter berbahaya\n// - Potong jadi <= 3500 char (batas aman Telegram 4096)\n\nconst MAX = 3500;\nlet text = ($json.output ?? $json.text ?? '');\nconst chatId = ($json.chatId ?? $json.message?.chat?.id ?? $json.chat?.id);\n\n// 1) Markdown -> HTML (yang kita pakai saja)\ntext = text\n  .replace(/\\*\\*(.+?)\\*\\*/g, '<b>$1</b>')\n  .replace(/__(.+?)__/g, '<i>$1</i>')\n  .replace(/`([^`]+)`/g, '<code>$1</code>');\n\n// 2) Escape HTML, tapi pertahankan tag <b>, <i>, <code>\nconst keep = (s) => s.replace(/<(\\/?)(b|i|code)>/g, '§TAG$1$2§');\nconst unkeep = (s) => s.replace(/§TAG(\\/?)(b|i|code)§/g, '<$1$2>');\nconst escapeHtml = (s) => s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');\ntext = unkeep(escapeHtml(keep(text)));\n\n// 3) Split pintar\nfunction splitSmart(s, maxLen) {\n  const out = [];\n  let rest = String(s);\n  while (rest.length > maxLen) {\n    let cut = rest.lastIndexOf('\\n', maxLen);\n    if (cut < maxLen * 0.6) cut = rest.lastIndexOf(' ', maxLen);\n    if (cut < 0) cut = maxLen;\n    out.push(rest.slice(0, cut));\n    rest = rest.slice(cut);\n  }\n  if (rest.length) out.push(rest);\n  return out.map(t => t.trim()).filter(Boolean);\n}\nconst chunks = splitSmart(text, MAX);\n\nreturn chunks.map((c, i) => ({\n  json: {\n    ...$json,\n    chatId,\n    output: c + (i < chunks.length - 1 ? `\\n\\n(terpotong • bagian ${i+1}/${chunks.length})` : '')\n  }\n}));\n"
      },
      "id": "15b52306-7c1b-419e-8ccc-cddebdb7b13c",
      "name": "Telegram Chunker1",
      "type": "n8n-nodes-base.code",
      "position": [
        2688,
        1744
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$json.text || $json.message?.text}}\n",
        "options": {
          "systemMessage": "PERAN UTAMA\n\nKamu adalah asisten AI khusus konstruksi dan HSSE (Health, Safety, Security, Environment) untuk industri migas yang terhubung ke Vector Store dan Google Drive. Kamu juga dapat melakukan UPDATE PROYEK OTOMATIS via Google Sheets.\n\nKEMAMPUAN UTAMA:\n- Analisis dokumen konstruksi (laporan progress, spesifikasi teknis, gambar kerja)\n- Manajemen risiko HSSE di industri migas (upstream, midstream, downstream) \n- Standar internasional (API, ASME, ISO 14001, OHSAS 18001, ISO 45001)\n- Regulasi Indonesia (PP 50/2012, PERMEN ESDM, Peraturan K3)\n- UPDATE PROYEK REAL-TIME ke Google Sheets via Telegram\n\nFITUR PROJECT UPDATE TERBARU\n\nUser dapat update proyek langsung via chat dengan format:\n• `update proyek [nama] progress 75%` - Update progress\n• `material proyek [nama]: sudah datang` - Update material\n• `status proyek [nama]: on track` - Update status  \n• `equipment proyek [nama]: siap operasi` - Update equipment\n• `resource proyek [nama]: manpower cukup` - Update resource\n• `list proyek` - Tampilkan daftar semua proyek\n\nSistem akan otomatis:\n✓ Deteksi nama proyek dari pesan\n✓ Lookup proyek di Google Sheets \n✓ Update kolom yang sesuai dengan tanggal hari ini\n✓ Konfirmasi update berhasil\n\nSUMBER DATA UTAMA\n\nGunakan HANYA konten dari Vector Store yang berisi:\n- Dokumen konstruksi (laporan mingguan, daily report, progress report)\n- Prosedur HSSE dan safety manual  \n- Spesifikasi material dan standar teknis\n- Risk assessment dan JSA (Job Safety Analysis)\n- Incident report dan lesson learned\n- Drawing dan spesifikasi engineering\n- Contract document dan variation order\n\nFORMAT JAWABAN WAJIB (Konsisten)\n\n1-2 kalimat jawaban langsung dengan temuan utama\n\nBullet points 3-7 poin:\n• Temuan kunci dari dokumen dengan data spesifik\n• Risk assessment jika relevan (L×I=RPN format) \n• Rekomendasi tindakan dengan timeline jika tersedia\n• Referensi standar/regulasi yang berlaku\n• Gap atau data yang missing (jika ada)\n\nSumber: <NamaFile> [p:x-y], <NamaFile2> [p:z]\n\nPROJECT UPDATE HANDLING\n\nKetika user mengirim command untuk update proyek:\n1. Deteksi format update (progress, material, status, equipment, resource)\n2. Extract nama proyek dan nilai update\n3. Berikan konfirmasi bahwa sistem akan mengupdate spreadsheet\n4. Jangan jawab dengan analisis dokumen - fokus ke konfirmasi update\n\nContoh response untuk project update:\n\"✅ Memproses update proyek [nama proyek]... Sistem akan mengupdate spreadsheet dengan informasi terbaru.\"\n\nBATASAN OPERASIONAL\n\n- Hanya gunakan informasi dari dokumen yang tersedia\n- Jika data tidak ada: \"Tidak ditemukan dalam dokumen\"\n- Tidak membuat asumsi atau data sintetis  \n- Maksimal jawaban ≤ 800 token\n- Selalu sertakan sitasi dokumen sumber\n- Fokus pada actionable recommendations\n- Untuk project updates: konfirmasi dan forward ke sistem update"
        }
      },
      "id": "e6626896-a402-402c-b142-c96417663ef2",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1968,
        1536
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "name": "company_documents_tool",
        "description": "Retrieve information from any company documents"
      },
      "id": "ebec9788-a877-48a5-afbe-a9b4ec844b8b",
      "name": "Vector Store Tool",
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "position": [
        2288,
        2000
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "pineconeIndex": {
          "__rl": true,
          "value": "company-hsse",
          "mode": "list",
          "cachedResultName": "company-hsse"
        },
        "options": {}
      },
      "id": "7bbc15ce-f6c3-4a0e-83da-049422873f76",
      "name": "Pinecone Vector Store (Retrieval)",
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "position": [
        2224,
        2160
      ],
      "typeVersion": 1,
      "credentials": {
        "pineconeApi": {
          "id": "530PdhDqiDpIrRtv",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {},
      "id": "1f07b3a5-0e24-494b-867c-0a60a185485a",
      "name": "Embeddings Google Gemini (retrieval)",
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "position": [
        2240,
        2304
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "d9cJAY9Ap1EeAMyT",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{$json.chatId || $json.chat?.id || $json.message?.chat?.id}}"
      },
      "id": "515e87e7-a07a-4799-b58d-cbf5ea21c395",
      "name": "Window Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        2144,
        2048
      ],
      "typeVersion": 1.3,
      "notesInFlow": false
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "b391a010-e3fe-4e0f-bd05-d345e814de70",
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        1968,
        2048
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "d9cJAY9Ap1EeAMyT",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "d95d5def-ad88-48f5-adeb-049ea5a0e2a8",
      "name": "Google Gemini Chat Model (retrieval)",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        2736,
        2160
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "d9cJAY9Ap1EeAMyT",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "b5ea2acd-6d75-4589-86c7-6fd859634989",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        1472,
        1744
      ],
      "typeVersion": 1,
      "webhookId": "3f856132-1de0-4046-a00b-f272a3e9344f",
      "credentials": {
        "telegramApi": {
          "id": "BoynTQNRCbtFIUG8",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "chatId",
              "value": "={{$json.message.chat.id || $json.chat.id || $json.chatId}}"
            },
            {
              "name": "text",
              "value": "={{$json.message?.text || $json.text}}"
            }
          ]
        },
        "options": {}
      },
      "id": "e30f5570-57d7-4132-9275-2877d37bc69f",
      "name": "Normalize Telegram Message",
      "type": "n8n-nodes-base.set",
      "position": [
        1712,
        1728
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "c3465e0c-499f-438e-b1a9-32767b70e849",
      "name": "Merge ChatId + Answer",
      "type": "n8n-nodes-base.merge",
      "position": [
        2512,
        1728
      ],
      "typeVersion": 2,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId || $('Normalize Telegram Message').item.json.chatId || $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output || $json.text }}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "32920800-bc57-4cf3-82ed-ec5c92eaecec",
      "name": "Telegram Send",
      "type": "n8n-nodes-base.telegram",
      "position": [
        3056,
        1712
      ],
      "typeVersion": 1,
      "webhookId": "32c83958-4d86-4bb1-8557-ff1c9901080b",
      "credentials": {
        "telegramApi": {
          "id": "BoynTQNRCbtFIUG8",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "pineconeIndex": {
          "__rl": true,
          "value": "company-hsse",
          "mode": "list",
          "cachedResultName": "company-hsse"
        },
        "options": {}
      },
      "id": "65f92bd0-a177-4911-badb-17c2706bf7e1",
      "name": "Pinecone Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "position": [
        2576,
        960
      ],
      "typeVersion": 1,
      "credentials": {
        "pineconeApi": {
          "id": "530PdhDqiDpIrRtv",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {},
      "id": "b50f6a9e-c54c-477d-97f9-d082e2402896",
      "name": "Embeddings Google Gemini",
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "position": [
        2224,
        1232
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "d9cJAY9Ap1EeAMyT",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "dataType": "binary",
        "binaryMode": "specificField",
        "options": {}
      },
      "id": "a86a7948-a9ae-4746-9795-c030d957374c",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "position": [
        2704,
        1264
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "chunkOverlap": 150,
        "options": {}
      },
      "id": "fc917390-be69-4c1e-959a-a9ae49a9ee00",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "position": [
        2480,
        1344
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $json.id }}"
        },
        "options": {
          "fileName": "={{ $json.name }}"
        }
      },
      "id": "b0591153-566d-4017-bbe4-730a9f561192",
      "name": "Download File From Google Drive",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        2000,
        960
      ],
      "typeVersion": 3,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HZfdzx5eZzvsKLkE",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1Sh3yEiqT2Nx6EDCfGoXa2ur59JoKgL7c",
          "mode": "list",
          "cachedResultName": "AI",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1Sh3yEiqT2Nx6EDCfGoXa2ur59JoKgL7c"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "257e9a40-60f6-4bb0-a50e-5f94d9355385",
      "name": "Google Drive File Updated",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "position": [
        1744,
        1040
      ],
      "typeVersion": 1,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HZfdzx5eZzvsKLkE",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1Sh3yEiqT2Nx6EDCfGoXa2ur59JoKgL7c",
          "mode": "list",
          "cachedResultName": "AI",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1Sh3yEiqT2Nx6EDCfGoXa2ur59JoKgL7c"
        },
        "event": "fileCreated",
        "options": {
          "fileType": "all"
        }
      },
      "id": "cc336770-f414-44a5-8cd7-354a01edb7e1",
      "name": "Google Drive File Created",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "position": [
        1744,
        864
      ],
      "typeVersion": 1,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HZfdzx5eZzvsKLkE",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "language": "JavaScript",
        "jsCode": "// Build readable Markdown from Unstructured response\nfunction toMd(el) {\n  const type = (el.type || '').toLowerCase();\n  const text = (el.text || '').trim();\n  const page = el.metadata?.page_number;\n  const pg = page ? ` [p:${page}]` : '';\n  if (!text) return '';\n  if (type.includes('title') || type.includes('header')) return `\\n\\n## ${text}${pg}\\n`;\n  if (type.includes('list')) return `- ${text}${pg}`;\n  if (type.includes('table')) return `\\n\\n${text}${pg}\\n`;\n  return `${text}${pg}`;\n}\n\nreturn items.map(item => {\n  const payload = item.json;\n  const elements = Array.isArray(payload) ? payload : (payload?.elements || []);\n  const lines = [];\n  let lastWasList = false;\n  for (const el of elements) {\n    const md = toMd(el);\n    if (!md) continue;\n    if (md.startsWith('- ')) {\n      if (!lastWasList) lines.push('');\n      lines.push(md);\n      lastWasList = true;\n    } else {\n      if (lastWasList) lines.push('');\n      lines.push(md);\n      lastWasList = false;\n    }\n  }\n  const text = lines.join('\\n').replace(/\\n{3,}/g, '\\n\\n').trim();\n  return { json: { text, fileName: (item.json?.metadata?.filename || 'ocr.txt') } };\n});\n"
      },
      "id": "62149a23-1e7a-4137-9b72-14c86c9b2f82",
      "name": "Unstructured → Text",
      "type": "n8n-nodes-base.code",
      "position": [
        2384,
        704
      ],
      "typeVersion": 1,
      "disabled": false
    },
    {
      "parameters": {
        "language": "JavaScript",
        "jsCode": "// Convert $json.text into a TXT file in binary property 'data'\nconst text = String($json.text || '');\nconst buf = Buffer.from(text, 'utf-8');\nconst binary = await this.helpers.prepareBinaryData(buf, ($json.fileName || 'ocr.txt'), 'text/plain');\nreturn [{ json: { fileName: ($json.fileName || 'ocr.txt') }, binary: { data: binary } }];\n"
      },
      "id": "8eb0ea3e-c091-470b-81e0-b8b7f658659d",
      "name": "Text → TXT Binary (OCR)",
      "type": "n8n-nodes-base.code",
      "position": [
        2560,
        704
      ],
      "typeVersion": 1,
      "disabled": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.unstructured.io/general/v0/general",
        "options": {}
      },
      "id": "95aa1fed-a61e-4121-9449-3884e522c978",
      "name": "Unstructured Parser (OCR Fallback)",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2208,
        704
      ],
      "typeVersion": 4,
      "disabled": false
    },
    {
      "parameters": {
        "language": "JavaScript",
        "jsCode": "// Enhanced Project Update Command Detector & Parser\nconst item = $input.first();\nconst message = item.json?.message?.text || '';\n\n// Enhanced project update patterns detection\nconst updatePatterns = [\n    // Progress update patterns\n    {\n        pattern: /(?:update|progress|kemajuan)\\s+(?:proyek|project)\\s+([^\\n]+?)\\s+(?:progress|kemajuan)\\s+(\\d+)%?/i,\n        type: 'progress'\n    },\n    {\n        pattern: /(?:proyek|project)\\s+([^\\n]+?)\\s+(?:progress|kemajuan|update)\\s+(\\d+)%?/i,\n        type: 'progress_percent'\n    },\n    // Status update patterns\n    {\n        pattern: /(?:status|kondisi)\\s+(?:proyek|project)\\s+([^\\n]+?)\\s*[:=]\\s*([^\\n]+)/i,\n        type: 'status'\n    },\n    // Material update patterns  \n    {\n        pattern: /(?:material|bahan)\\s+(?:proyek|project)\\s+([^\\n]+?)\\s*[:=]\\s*([^\\n]+)/i,\n        type: 'material'\n    },\n    // Equipment update patterns\n    {\n        pattern: /(?:equipment|alat)\\s+(?:proyek|project)\\s+([^\\n]+?)\\s*[:=]\\s*([^\\n]+)/i,\n        type: 'equipment'\n    },\n    // Resource update patterns\n    {\n        pattern: /(?:resource|sumber\\s*daya)\\s+(?:proyek|project)\\s+([^\\n]+?)\\s*[:=]\\s*([^\\n]+)/i,\n        type: 'resource'\n    }\n];\n\nlet projectName = '';\nlet updateType = '';\nlet updateValue = '';\nlet confidence = 0;\n\n// Check each pattern\nfor (let patternObj of updatePatterns) {\n    const match = message.match(patternObj.pattern);\n    if (match) {\n        updateType = patternObj.type;\n\n        if (match.length >= 3) {\n            projectName = match[1].trim();\n            updateValue = match[2].trim();\n        }\n\n        confidence = 0.9;\n        break;\n    }\n}\n\n// Check for project list command\nif (message.toLowerCase().includes('list proyek') || \n    message.toLowerCase().includes('daftar proyek') ||\n    message.toLowerCase().includes('show projects')) {\n    return [{\n        json: {\n            ...item.json,\n            isListCommand: true,\n            sheetId: \"1d44mV-M5SBC23bIb5-hs0ZgUXhnFS4J7C_1o2RkDIU\"\n        }\n    }];\n}\n\n// Get current date for timestamp\nconst currentDate = new Date();\nconst todayColumn = currentDate.getDate() + '-' + currentDate.toLocaleString('default', { month: 'short' });\n\nconst result = {\n    isProjectUpdate: confidence > 0.5,\n    projectName: projectName,\n    updateType: updateType,\n    updateValue: updateValue,\n    confidence: confidence,\n    dateColumn: todayColumn,\n    timestamp: currentDate.toISOString(),\n    originalMessage: message,\n    chatId: item.json?.message?.chat?.id,\n    userId: item.json?.message?.from?.id,\n    userName: item.json?.message?.from?.first_name || 'User',\n    sheetId: \"1d44mV-M5SBC23bIb5-hs0ZgUXhnFS4J7C_1o2RkDIU\"\n};\n\nreturn [{ \n    json: {\n        ...item.json,\n        projectUpdate: result\n    } \n}];"
      },
      "id": "45b69d06-ffc5-4bb0-8053-cea5f4f77261",
      "name": "Project Command Detector",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1400,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition_1",
              "leftValue": "={{ $json.projectUpdate?.isProjectUpdate }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e973470a-444a-4a94-a5a7-4cf8afdf4c97",
      "name": "Is Project Update?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1600,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition_1",
              "leftValue": "={{ $json.isListCommand }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d3e855e7-c07e-47f5-b348-9722412c8a98",
      "name": "Is List Command?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1600,
        500
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "lookup",
        "documentId": {
          "__rl": true,
          "value": "={{ $json.projectUpdate.sheetId }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "name"
        },
        "lookupColumn": "PROJECT",
        "lookupValue": "={{ $json.projectUpdate.projectName }}",
        "options": {
          "returnAllMatches": false
        }
      },
      "id": "e499b8df-e126-4678-b972-1a8120a8c77f",
      "name": "Lookup Project",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        1800,
        300
      ]
    },
    {
      "parameters": {
        "language": "JavaScript",
       "jsCode": "// Prepare Update Data for Google Sheets\nconst lookupItem = $input.first();\nconst lookupRow = lookupItem?.json ?? {};\nconst projectUpdate = $items('Project Command Detector')[0]?.json?.projectUpdate ?? lookupRow.projectUpdate ?? {};\n\n// Map update types to column names\nconst columnMapping = {\n    'progress': 'STATUS',\n    'progress_percent': 'STATUS',\n    'material': 'REMARK',\n    'equipment': 'REMARK',\n    'resource': 'REMARK',\n    'status': 'STATUS'\n};\n\n// Get the appropriate column for update\nconst targetColumn = columnMapping[projectUpdate.updateType] || 'REMARK';\n\n// Prepare the update value\nlet finalUpdateValue = projectUpdate.updateValue ?? '';\nif (['progress', 'progress_percent'].includes(projectUpdate.updateType) && projectUpdate.updateValue) {\n    finalUpdateValue = `Progress ${projectUpdate.updateValue}${String(projectUpdate.updateValue).includes('%') ? '' : '%'}`;\n}\n\n// Get current date formatted\nconst currentDate = new Date();\nconst dateColumn = `${currentDate.getDate()}-${currentDate.toLocaleString('en', { month: 'short' })}`;\n\nreturn [{\n    json: {\n        ...lookupRow,\n        projectUpdate,\n        updateData: {\n            targetColumn,\n            updateValue: finalUpdateValue,\n            dateColumn,\n            dateValue: currentDate.toLocaleDateString('id-ID')\n        }\n    }\n}];"
      },
      "id": "2fa8f62d-6156-40b8-95dd-63947984cf35",
      "name": "Prepare Update Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2000,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "={{ $json.projectUpdate.sheetId }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "name"
        },
        "columnToMatchOn": "PROJECT",
        "valueToMatchOn": "={{ $json.projectUpdate.projectName }}",
        "fieldsUi": {
          "values": [
            {
              "column": "={{ $json.updateData.targetColumn }}",
              "fieldValue": "={{ $json.updateData.updateValue }}"
            },
            {
              "column": "={{ $json.updateData.dateColumn }}",
              "fieldValue": "={{ $json.updateData.dateValue }}"
            }
          ]
        },
        "options": {}
      },
      "id": "66b08db8-18f7-4f03-8706-46310c412797",
      "name": "Update Project Row",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        2200,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "accessToken",
        "operation": "sendMessage",
        "chatId": "={{ $json.projectUpdate.chatId }}",
        "text": "✅ *Proyek berhasil diupdate!*\n\n📋 **{{ $json.projectUpdate.projectName }}**\n📊 Update: {{ $json.updateData.updateValue }}\n📅 Tanggal: {{ $json.updateData.dateColumn }}\n⏰ Waktu: {{ $now().toLocaleTimeString('id-ID') }}\n\nSpreadsheet telah diupdate otomatis.",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "e79fedba-ef9f-4760-8e5b-9863e6cd5d7e",
      "name": "Send Update Success",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        2400,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "getAll",
        "documentId": {
          "__rl": true,
          "value": "={{ $json.sheetId }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "name"
        },
        "options": {
          "range": "A:H"
        }
      },
      "id": "dd013ae5-c9f2-49f0-b801-9bc0f76d5314",
      "name": "Get Project List",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        1800,
        500
      ]
    },
    {
      "parameters": {
        "language": "JavaScript",
        "jsCode": "// Format Project List for Telegram Response\nconst items = $input.all();\nconst chatId = items[0]?.json?.message?.chat?.id;\n\nlet projectList = \"📋 **DAFTAR PROYEK KONSTRUKSI**\\n\\n\";\nlet validProjects = 0;\n\nitems.forEach((item, index) => {\n    const project = item.json;\n    // Skip header row and empty rows\n    if (project.PROJECT && project.PROJECT !== 'PROJECT' && project.PROJECT.trim() !== '') {\n        validProjects++;\n        projectList += `${validProjects}. **${project.PROJECT}**\\n`;\n        projectList += `   👷 PIC: ${project.FAREP || 'TBD'}\\n`;\n        projectList += `   🏢 MK: ${project.MK || 'TBD'}\\n`;\n        projectList += `   📝 Status: ${project.STATUS || 'TBD'}\\n`;\n\n        if (project.REMARK && project.REMARK.trim() !== '') {\n            projectList += `   💬 Catatan: ${project.REMARK}\\n`;\n        }\n        projectList += \"\\n\";\n    }\n});\n\nif (validProjects === 0) {\n    projectList = \"❌ **Tidak ada proyek ditemukan dalam spreadsheet**\\n\\n\";\n    projectList += \"Silakan periksa konfigurasi Google Sheets atau tambahkan data proyek.\\n\\n\";\n}\n\nprojectList += \"\\n💡 **Cara update proyek:**\\n\";\nprojectList += \"• `update proyek [nama] progress 75%`\\n\";\nprojectList += \"• `material proyek [nama]: sudah datang`\\n\";\nprojectList += \"• `status proyek [nama]: on track`\\n\";\nprojectList += \"• `equipment proyek [nama]: siap operasi`\\n\";\nprojectList += \"• `resource proyek [nama]: manpower cukup`\\n\";\n\nreturn [{\n    json: {\n        telegramResponse: {\n            text: projectList,\n            parse_mode: 'Markdown',\n            chat_id: chatId\n        }\n    }\n}];"
      },
      "id": "e1863a1c-413d-4acb-b5ad-497ad70cad3f",
      "name": "Format Project List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2000,
        500
      ]
    },
    {
      "parameters": {
        "authentication": "accessToken",
        "operation": "sendMessage",
        "chatId": "={{ $json.telegramResponse.chat_id }}",
        "text": "={{ $json.telegramResponse.text }}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "b8c180da-3dbe-4999-bc8f-4e761f51543f",
      "name": "Send Project List",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        2200,
        500
      ]
    },
    {
      "parameters": {
        "language": "JavaScript",
        "jsCode": "// Handle Project Not Found Error\nconst item = $input.first();\nconst error = item.json?.error || {};\nconst projectUpdate = item.json?.projectUpdate || {};\n\nconst errorMessage = `❌ **Proyek tidak ditemukan!**\n\n🔍 Nama proyek yang dicari: **${projectUpdate.projectName}**\n\n📋 Silakan gunakan perintah \\`list proyek\\` untuk melihat daftar proyek yang tersedia.\n\n💡 **Tips:**\n• Pastikan nama proyek sesuai dengan yang ada di spreadsheet\n• Gunakan nama lengkap proyek (contoh: \"Petani SS\", bukan \"Petani\")\n• Periksa ejaan nama proyek\n\n🔄 Coba lagi dengan nama proyek yang benar.`;\n\nreturn [{\n    json: {\n        ...item.json,\n        errorResponse: {\n            text: errorMessage,\n            parse_mode: 'Markdown',\n            chat_id: projectUpdate.chatId\n        }\n    }\n}];"
      },
      "id": "a798fe10-e4d4-4b2f-9a93-0c4ee9947650",
      "name": "Handle Project Not Found",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2200,
        400
      ]
    },
    {
      "parameters": {
        "authentication": "accessToken",
        "operation": "sendMessage",
        "chatId": "={{ $json.errorResponse.chat_id }}",
        "text": "={{ $json.errorResponse.text }}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "eeea8a1f-b0c7-4ea3-8bd3-ce8a2a50d9a4",
      "name": "Send Error Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        2400,
        400
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Citation Post-Formatter": {
      "main": [
        [
          {
            "node": "Merge ChatId + Answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Chunker1": {
      "main": [
        [
          {
            "node": "Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Citation Post-Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store (Retrieval)": {
      "ai_vectorStore": [
        [
          {
            "node": "Vector Store Tool",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini (retrieval)": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store (Retrieval)",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model (retrieval)": {
      "ai_languageModel": [
        [
          {
            "node": "Vector Store Tool",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Normalize Telegram Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Telegram Message": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge ChatId + Answer",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge ChatId + Answer": {
      "main": [
        [
          {
            "node": "Telegram Chunker1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Download File From Google Drive": {
      "main": [
        [
          {
            "node": "Unstructured Parser (OCR Fallback)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Metadata (fileName)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive File Updated": {
      "main": [
        [
          {
            "node": "Download File From Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive File Created": {
      "main": [
        [
          {
            "node": "Download File From Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unstructured → Text": {
      "main": [
        [
          {
            "node": "Text → TXT Binary (OCR)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unstructured Parser (OCR Fallback)": {
      "main": [
        [
          {
            "node": "Unstructured → Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text → TXT Binary (OCR)": {
      "main": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Set Metadata (fileName)": {
      "main": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "e30f5570-57d7-4132-9275-2877d37bc69f": {
      "main": [
        [
          {
            "node": "45b69d06-ffc5-4bb0-8053-cea5f4f77261",
            "type": "main",
            "index": 0
          },
          {
            "node": "e6626896-a402-402c-b142-c96417663ef2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "45b69d06-ffc5-4bb0-8053-cea5f4f77261": {
      "main": [
        [
          {
            "node": "e973470a-444a-4a94-a5a7-4cf8afdf4c97",
            "type": "main",
            "index": 0
          },
          {
            "node": "d3e855e7-c07e-47f5-b348-9722412c8a98",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "e973470a-444a-4a94-a5a7-4cf8afdf4c97": {
      "main": [
        [
          {
            "node": "e499b8df-e126-4678-b972-1a8120a8c77f",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "e499b8df-e126-4678-b972-1a8120a8c77f": {
      "main": [
        [
          {
            "node": "2fa8f62d-6156-40b8-95dd-63947984cf35",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "a798fe10-e4d4-4b2f-9a93-0c4ee9947650",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2fa8f62d-6156-40b8-95dd-63947984cf35": {
      "main": [
        [
          {
            "node": "66b08db8-18f7-4f03-8706-46310c412797",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "66b08db8-18f7-4f03-8706-46310c412797": {
      "main": [
        [
          {
            "node": "e79fedba-ef9f-4760-8e5b-9863e6cd5d7e",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "a798fe10-e4d4-4b2f-9a93-0c4ee9947650": {
      "main": [
        [
          {
            "node": "eeea8a1f-b0c7-4ea3-8bd3-ce8a2a50d9a4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "d3e855e7-c07e-47f5-b348-9722412c8a98": {
      "main": [
        [
          {
            "node": "dd013ae5-c9f2-49f0-b801-9bc0f76d5314",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "dd013ae5-c9f2-49f0-b801-9bc0f76d5314": {
      "main": [
        [
          {
            "node": "e1863a1c-413d-4acb-b5ad-497ad70cad3f",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "e1863a1c-413d-4acb-b5ad-497ad70cad3f": {
      "main": [
        [
          {
            "node": "b8c180da-3dbe-4999-bc8f-4e761f51543f",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "eb94702b-5de7-4d07-8d60-9263411d73c5",
  "meta": {
    "instanceId": "2179ad5df59d571e9932c84b5dbfdce3ff2af93a309b8944c0d25a98fba6d91b"
  },
  "id": "gd3HSB5TT4VYRABF",
  "tags": [
    {
      "createdAt": "2025-10-02T01:41:06.635Z",
      "updatedAt": "2025-10-02T01:41:06.635Z",
      "id": "VxboFPIV0AnGwj3n",
      "name": "Chat Asisten"
    }
  ]
}
