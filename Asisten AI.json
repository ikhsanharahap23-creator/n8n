{
  "name": "dengan supabase",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "6bdd2892-e01c-498f-b058-b558c2da821d",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -1680,
        1616
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "f75a35db-234a-4ca3-beac-55f2b1e1912e",
      "name": "Extract from PDF",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -576,
        1424
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "dbf8c17e-fa35-43b8-96df-338646240262",
      "name": "Extract from CSV",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -560,
        1824
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.concatenated_text }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "file_id",
                "value": "={{ $('Set File ID').first().json.file_id}}"
              },
              {
                "name": "title",
                "value": "={{ $('Create Metadata Title & Description').item.json.output.title }}"
              },
              {
                "name": "description",
                "value": "={{ $('Create Metadata Title & Description').item.json.output.description }}"
              }
            ]
          }
        }
      },
      "id": "26ad24fc-e06c-412c-b00e-791ad7456ea6",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "position": [
        1792,
        1840
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1Sh3yEiqT2Nx6EDCfGoXa2ur59JoKgL7c",
          "mode": "list",
          "cachedResultName": "AI",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1Sh3yEiqT2Nx6EDCfGoXa2ur59JoKgL7c"
        },
        "event": "fileCreated",
        "options": {
          "fileType": "all"
        }
      },
      "id": "d8354fe4-c4ee-4016-ac04-1efa151a7787",
      "name": "Google Drive Trigger File Created",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "position": [
        -2240,
        1488
      ],
      "typeVersion": 1,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HZfdzx5eZzvsKLkE",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "separator": "###SPLIT###"
      },
      "id": "2d919a51-8a1d-44a6-a1b5-807c6fc91234",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "position": [
        1904,
        2000
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0144a9a7-6e73-46c4-979f-838ad5c62b89",
              "name": "file_id",
              "type": "string",
              "value": "={{ $json.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d3559049-9115-4de7-8abf-b6f3f73fd036",
      "name": "Set File ID",
      "type": "n8n-nodes-base.set",
      "position": [
        -1424,
        1632
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $('Set File ID').item.json.file_id }}"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "application/pdf"
            }
          }
        }
      },
      "id": "32a5b1ea-ac87-4ec0-9504-1350f693e054",
      "name": "Download FIle",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        -1184,
        1632
      ],
      "typeVersion": 3,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HZfdzx5eZzvsKLkE",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "e959d5a8-d311-4a29-b400-7c07468a72fe",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $binary.data.mimeType }}",
                    "rightValue": "application/pdf"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "application/pdf"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "d5ae6f2d-e62d-4e08-aa06-629e6dfa7ee8",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $binary.data.mimeType }}",
                    "rightValue": "text/csv"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "text/csv"
            }
          ]
        },
        "options": {}
      },
      "id": "96e8a445-1de6-407e-8cc1-9338eb9af686",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "position": [
        -896,
        1632
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"title\": \"Test Title (Replace it with real title\",\n    \"description\":\"Test Description (Replace it with real description)\"\n}"
      },
      "id": "c4216e68-f4ac-4baa-8b23-d5ce20cd4270",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        288,
        1840
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "93f9b43d-cdca-4eda-8ef7-bc1719707a82",
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        1152,
        1840
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "d9cJAY9Ap1EeAMyT",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<document> \n{{ $('Document Data').first().json.data }}\n</document> \n\nHere is the chunk we want to situate within the overall document:\n\n<chunk> \n{{ $json.chunk }}\n</chunk> \n\nPlease:\n- Provide a short and succinct **context** to situate this chunk within the document for improved search retrieval.\n- Return the **original chunk** exactly as provided unless a correction is necessary.\n- If the chunk contains an **incomplete number, percentage, or entity**, correct it using the full document.\n- If part of a **sentence is cut off**, reconstruct the missing words only if necessary for clarity.\n- If the chunk is part of a table, include the complete table entry to maintain data integrity\n- Do not add any additional explanations or formatting beyond the required output.\n\nFill in the following format:\n[succinct context] : [original chunk or corrected version if necessary]\n\nYour response should contain only the text that replaces these placeholders, without including the placeholder labels themselves."
      },
      "id": "bf930f41-711c-4f70-9525-dd7a4114fee8",
      "name": "Process Context",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        1152,
        1616
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"text\": {{ JSON.stringify($json.content ?? $json.text ?? \"\") }},\n  \"metadata\": {{\n    (()=>{\n      const m = $json.metadata;\n      if (!m) return {};\n      if (typeof m === \"string\") {\n        try { return JSON.parse(m); }\n        catch(e) { return { raw: m }; }   // kalau gagal parse, simpan apa adanya\n      }\n      return m;\n    })()\n  }}\n}\n",
        "options": {}
      },
      "id": "145a66cb-a980-4737-805d-2550b62895c8",
      "name": "Document Data",
      "type": "n8n-nodes-base.set",
      "position": [
        -240,
        1616
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "fieldToSplitOut": "chunks",
        "options": {
          "destinationFieldName": "chunk"
        }
      },
      "id": "374f3878-df78-478d-b870-4a93e27e9bf6",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        784,
        1616
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "maxItems": 20
      },
      "id": "afafdb90-902e-4c79-8d97-6a558cbda953",
      "name": "Limit",
      "type": "n8n-nodes-base.limit",
      "position": [
        960,
        1616
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "text",
              "separateBy": "other",
              "customSeparator": "###SPLIT###"
            }
          ]
        },
        "options": {}
      },
      "id": "e39200c2-c11d-459c-bcb5-e98da969578d",
      "name": "Summarize",
      "type": "n8n-nodes-base.summarize",
      "position": [
        1472,
        1616
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "document",
          "mode": "list",
          "cachedResultName": "document"
        },
        "options": {}
      },
      "id": "fae0e643-d749-48b2-bdab-34e9bb20af6d",
      "name": "Add Data to Supabase Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "position": [
        1680,
        1616
      ],
      "typeVersion": 1.1,
      "credentials": {
        "supabaseApi": {
          "id": "v7dhh8esNEyAShe8",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "ea45be38-f1eb-4c43-94b2-efc9ab345858",
      "name": "Google Gemini Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        64,
        1824
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "d9cJAY9Ap1EeAMyT",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create metadata title and metadata description based on the document specified below (below ##Document). Metadata title and metadata description will be used to seperate data in vector DB that will be used for RAG.\n\n##Document\n{{ $('Document Data').item.json.data }}",
        "hasOutputParser": true
      },
      "id": "f611561a-77ca-46d7-a816-3db73cb27ae0",
      "name": "Create Metadata Title & Description",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        64,
        1616
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "jsCode": "// ----- parameter chunking -----\nconst CHUNK_SIZE = 1000;\nconst CHUNK_OVERLAP = 200;\n\n// 1) Ambil item dari input node ini (jika Document Data disambungkan langsung)\nconst inputItems = $input.all();\nlet docItem = (inputItems[0]?.json) || {};\n\n// 2) Jika kosong (misal node ini bercabang), ambil dari node bernama \"Document Data\"\nif (!docItem || Object.keys(docItem).length === 0) {\n  // $items(\"Nama Node\", runIndex, outputIndex) -> array of items\n  const docItemsFromNode = $items(\"Document Data\", 0, 0);\n  docItem = (docItemsFromNode[0]?.json) || {};\n}\n\n// 3) Ambil teks dengan fallback aman (text -> data -> content -> \"\")\nconst rawText = (docItem.text ?? docItem.data ?? docItem.content ?? \"\").toString();\n\n// 4) Kalau teks kosong, kembalikan 0 item supaya tidak error di node berikutnya\nif (!rawText.trim()) {\n  return [];\n}\n\n// 5) Normalisasi newline dan lakukan chunking\nlet remaining = rawText.replace(/\\r\\n/g, \"\\n\");\nconst chunks = [];\n\nwhile (remaining.length > 0) {\n  // Usahakan pisah di batas paragraf\n  let splitPoint = remaining.lastIndexOf(\"\\n\\n\", CHUNK_SIZE);\n  if (splitPoint < 0 || splitPoint < CHUNK_SIZE / 2) {\n    splitPoint = Math.min(CHUNK_SIZE, remaining.length);\n  }\n\n  const chunkText = remaining.slice(0, splitPoint);\n\n  chunks.push({\n    json: {\n      chunk: chunkText,\n      metadata: docItem.metadata ?? null\n    }\n  });\n\n  // Overlap\n  const startNext = Math.max(0, splitPoint - CHUNK_OVERLAP);\n  remaining = remaining.slice(startNext);\n}\n\nreturn chunks;\n"
      },
      "id": "79724930-ff59-4aea-a89f-c0c3bcb12123",
      "name": "Split into chunks",
      "type": "n8n-nodes-base.code",
      "position": [
        624,
        1616
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "d36e3e01-2683-4eba-8b14-770a75bf503a",
      "name": "Embeddings Google Gemini1",
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "position": [
        1664,
        1888
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "d9cJAY9Ap1EeAMyT",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1Sh3yEiqT2Nx6EDCfGoXa2ur59JoKgL7c",
          "mode": "list",
          "cachedResultName": "AI",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1Sh3yEiqT2Nx6EDCfGoXa2ur59JoKgL7c"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "14130fbc-15b6-4727-b6ff-0e250d0651cd",
      "name": "Google Drive File Updated",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "position": [
        -2224,
        1792
      ],
      "typeVersion": 1,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HZfdzx5eZzvsKLkE",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "documents",
        "toolDescription": "Work with your data in Supabase Vector Store",
        "tableName": {
          "__rl": true,
          "value": "document",
          "mode": "list",
          "cachedResultName": "document"
        },
        "topK": 20,
        "options": {}
      },
      "id": "624c73ab-5393-4944-8257-7633d67917df",
      "name": "Supabase Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "position": [
        -496,
        832
      ],
      "typeVersion": 1.1,
      "credentials": {
        "supabaseApi": {
          "id": "v7dhh8esNEyAShe8",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$json.text || $json.message?.text}}\n",
        "options": {
          "systemMessage": "=You're an internal company knowledge assistants. Your job is to answer questions using the files in the Vector Database. Here's how to do it:\n\nCheck Vector Database First\n- Search for similar test chunks using RAG.\n- If you find matches, use them to answer the question. \n- If you find relevant matches and need additional context to support the answer, prioritize retrieving it from documents that share the same metadata \"file_id\" & \"title\" before exploring other sources.\"\n\nNo Answer Found?\n- Clearly say: \"Saya Tidak Mengetahui al itu, mungkin bisa untuk menambahkan file tersebut ke database saya\"\n- Never guess or invent answers.\n\nExample Response:\n\"Netflix grew revenue in Streaming services by 20% in 2024.\""
        }
      },
      "id": "c4629dc4-ca37-47ff-b528-2a750c911953",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -752,
        576
      ],
      "typeVersion": 1.8
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{$json.chatId || $json.chat?.id || $json.message?.chat?.id}}",
        "contextWindowLength": 10
      },
      "id": "87de549e-3050-42ea-b478-3f73f034d1fd",
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        -640,
        832
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "59490201-ed1e-4885-a71e-0ae07711c0a7",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        -1040,
        576
      ],
      "typeVersion": 1,
      "webhookId": "3f856132-1de0-4046-a00b-f272a3e9344f",
      "credentials": {
        "telegramApi": {
          "id": "BoynTQNRCbtFIUG8",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId ?? $node[\"Telegram Trigger\"].json?.message?.chat?.id }}\n",
        "text": "={{ $json.output || $json.text }}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "e6ff3408-7473-4cd2-9961-955f805c0b18",
      "name": "Telegram Send",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -160,
        576
      ],
      "typeVersion": 1,
      "webhookId": "32c83958-4d86-4bb1-8557-ff1c9901080b",
      "retryOnFail": true,
      "credentials": {
        "telegramApi": {
          "id": "BoynTQNRCbtFIUG8",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "bec67132-0ae0-4bbc-b850-1edd149156fd",
      "name": "Google Gemini Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        -960,
        1024
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "d9cJAY9Ap1EeAMyT",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {},
      "id": "db0fe982-0324-42ae-b36d-2cee2fb75114",
      "name": "Embeddings Google Gemini",
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "position": [
        -416,
        1024
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "d9cJAY9Ap1EeAMyT",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Ambil semua items dari node sebelumnya\nconst items = $input.all();\n\nreturn items.map(item => {\n  const j = item.json;\n\n  return {\n    json: {\n      // teruskan field lain bila perlu:\n      ...j,\n\n      // gabungkan text dari extractor manapun\n      text: j.text ?? j.data ?? j.content ?? '',\n\n      // metadata yang kamu butuhkan\n      metadata: {\n        source: 'gdrive',\n        file_id: j.fileId,\n        file_name: j.fileName,\n        mime_type: j.mimeType,\n        modified_time: j.modifiedTime,\n      },\n    },\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        464,
        1616
      ],
      "id": "6ed0319d-1b57-4f7a-9bd5-6265d726ae43",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "jsCode": "// Ambil teks mentah dari node sebelumnya\nlet s = String($json.output ?? $json.text ?? \"\");\n\n// Normalisasi baris\ns = s.replace(/\\r\\n?/g, \"\\n\");\n\n// 1) Hilangkan penanda bold **...** tapi SIMPAN isinya\ns = s.replace(/\\*\\*(.*?)\\*\\*/g, \"$1\");\n\n// 2) Hilangkan bullet di awal baris (*, -, atau •) tapi SIMPAN teksnya\ns = s.replace(/^\\s*[\\*\\-•]\\s+/gm, \"\");\n\n// 3) Rapikan spasi di akhir baris\ns = s.replace(/[ \\t]+$/gm, \"\");\n\n// 4) Hindari terlalu banyak baris kosong berturut-turut\ns = s.replace(/\\n{3,}/g, \"\\n\\n\");\n\n// --- (Opsional) Pecah pesan agar aman dari limit Telegram (4096 char) ---\nconst LIMIT = 3900;  // sedikit di bawah 4096 untuk aman\nconst out = [];\nwhile (s.length > 0) {\n  let chunk = s.slice(0, LIMIT);\n  // usahakan memotong di batas baris agar rapi\n  if (s.length > LIMIT) {\n    const cut = chunk.lastIndexOf(\"\\n\");\n    if (cut > 2000) chunk = chunk.slice(0, cut);\n  }\n  out.push({ text: chunk });\n  s = s.slice(chunk.length);\n}\n\nreturn out.length ? out : [{ text: \"\" }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -384,
        576
      ],
      "id": "58684cb6-4ae1-49be-a3af-413f16b4d321",
      "name": "Code membaguskan jawaban telegram"
    }
  ],
  "pinData": {},
  "connections": {
    "Limit": {
      "main": [
        [
          {
            "node": "Process Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract from PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Add Data to Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID": {
      "main": [
        [
          {
            "node": "Download FIle",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document Data": {
      "main": [
        [
          {
            "node": "Create Metadata Title & Description",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download FIle": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Set File ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Context": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from CSV": {
      "main": [
        [
          {
            "node": "Document Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from PDF": {
      "main": [
        [
          {
            "node": "Document Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split into chunks": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Add Data to Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Process Context",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Create Metadata Title & Description",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Create Metadata Title & Description",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive Trigger File Created": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Metadata Title & Description": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini1": {
      "ai_embedding": [
        [
          {
            "node": "Add Data to Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive File Updated": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code membaguskan jawaban telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Split into chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code membaguskan jawaban telegram": {
      "main": [
        [
          {
            "node": "Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1da4ec8e-30c1-4c9c-a0a7-64a1922af0f7",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2179ad5df59d571e9932c84b5dbfdce3ff2af93a309b8944c0d25a98fba6d91b"
  },
  "id": "JYfuYyyKgCV5VOdW",
  "tags": []
}
